容器可以用于存放各种类型的数据（基本类型的变量，对象等）的数据结构，都是模板类，
分为顺序容器、关联式容器、容器适配器三种类型，三种类型容器特性分别如下：

顺序容器

    容器并非排序的，元素的插入位置同元素的值无关。包含vector、deque、list，具体实现原理如下：

（1）vector    头文件<vector>

 动态数组。元素在内存连续存放。随机存取任何元素都能在常数时间完成。在尾端增删元素具有较佳的性能。

（2）deque    头文件<deque>

 双向队列。元素在内存连续存放。随机存取任何元素都能在常数时间完成（仅次于vector）。
	在两端增删元素具有较佳的性能（大部分情况下是常数时间）。

（3）list    头文件<list>

     双向链表。元素在内存不连续存放。在任何位置增删元素都能在常数时间完成。不支持随机存取。
===================================================================================================
关联式容器

    元素是排序的；插入任何元素，都按相应的排序规则来确定其位置；在查找时具有非常好的性能；
	通常以平衡二叉树的方式实现。包含set、multiset、map、multimap，具体实现原理如下：

（1）set/multiset    头文件<set>

        set 即集合。set中不允许相同元素，multiset中允许存在相同元素。

（2）map/multimap    头文件<map>

        map与set的不同在于map中存放的元素有且仅有两个成员变，一个名为first,另一个名为second, 
	map根据first值对元素从小到大排序，并可快速地根据first来检索元素。

    注意：map同multimap的不同在于是否允许相同first值的元素。
===================================================================================================
容器适配器

    封装了一些基本的容器，使之具备了新的函数功能，比如把deque封装一下变为一个具有stack功能的数据结构。
      这新得到的数据结构就叫适配器。包含stack,queue,priority_queue，具体实现原理如下：
	

（1）stack    头文件<stack>

        栈是项的有限序列，并满足序列中被删除、检索和修改的项只能是最进插入序列的项（栈顶的项）。后进先出。

（2）queue    头文件<queue>

        队列。插入只可以在尾部进行，删除、检索和修改只允许从头部进行。先进先出。

（3）priority_queue    头文件<queue>

        优先级队列。内部维持某种有序，然后确保优先级最高的元素总是位于头部。最高优先级元素总是第一个出列。
===================================================================================================
1.4.3 说说 STL 中 map hashtable deque list 的实现原理
参考回答

    map、hashtable、deque、list实现机理分别为红黑树、函数映射、双向队列、双向链表，他们的特性分别如下：

map实现原理

map内部实现了一个红黑树（红黑树是非严格平衡的二叉搜索树，而AVL是严格平衡二叉搜索树），红黑树有自动排序的功能，
因此map内部所有元素都是有序的，红黑树的每一个节点都代表着map的一个元素。因此，对于map进行的查找、删除、
添加等一系列的操作都相当于是对红黑树进行的操作。map中的元素是按照二叉树（又名二叉查找树、二叉排序树）存储的，
特点就是左子树上所有节点的键值都小于根节点的键值，右子树所有节点的键值都大于根节点的键值。使用中序遍历可将键值
按照从小到大遍历出来。hashtable（也称散列表，直译作哈希表）实现原理



    hashtable采用了函数映射的思想记录的存储位置与记录的关键字关联起来，从而能够很快速地进行查找。
	这决定了哈希表特殊的数据结构，它同数组、链表以及二叉排序树等相比较有很明显的区别，
	它能够快速定位到想要查找的记录，而不是与表中存在的记录的关键字进行比较来进行查找。

deque实现原理

    deque内部实现的是一个双向队列。元素在内存连续存放。随机存取任何元素都在常数时间完成（仅次于vector）。
	所有适用于vector的操作都适用于deque。在两端增删元素具有较佳的性能（大部分情况下是常数时间）。

list实现原理

    list内部实现的是一个双向链表。元素在内存不连续存放。在任何位置增删元素都能在常数时间完成。不支持随机存取。
	无成员函数，给定一个下标i，访问第i个元素的内容，只能从头部挨个遍历到第i个元素。