vector容器构造

vector<T> v;	//采用模板实现类实现，默认构造函数
vector(v.begin(),v.end());	//将v(begin(),end())区间中的元素拷贝给自身
vector(n, elem);	//构造函数将n个elem拷贝给自身。
vector(const vector &vec);	//拷贝构造函数


vector赋值：

vector& operator=(const vector &vec);   //重载等号赋值操作
assign(beg, end);	//将(beg,end)区间中的数据拷贝赋值给本身。
assign(n,elem);		//将n个elem拷贝赋值给本身。


vector容器的容量和大小操作：

emoty();	//判断容器是否为空
capacity();	//容器的容量
size();	//返回容器中元素的个数
resize(int num);//重新指定容器的长度，若容器变长,则以默认值填充新位置，如果容器变短，则末尾超出容器长度的元素被删除。
resize(int num, elem);//重新指定容器的长度为num，若容器边长，则以elem值填充新位置，如果容器变短，则末尾超出容器长度的元素被删除


vector插入和删除：

push_back(ele);                                       //尾部插入元素ele
pop_back();                                           //删除最后一个元素
insert(const_iterator pos,ele);                       //迭代器指向位置pos插入元素ele
insert(const_iterator pos, int count,ele);            //迭代器指向位置pos插入count个元素ele
erase(const_iterator pos);                            //删除迭代器指向的元素
erase(const_iterator strat,const_iterator end);       //删除迭代器从start到end之间的元素
clear();				//删除容器中所有元素


vector容器  数据存取

at(int idx);	//返回索引idx所指的数据
operator[];		//返回索引idx所指的数据
frint();		//返回容器中第一个数据元素
back();			//返回容器中最后一个数据元素


vector预留空间

reserve(int len);//容器预留len个元素长度，预留位置不初始化，元素不可访问
reverse(beg,end);//将(beg,end)中的数据进行翻转

remove(int n);删除容器中元素为n的所有元素