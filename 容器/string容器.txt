string赋值操作 
string& operator=(const char* s);                 //char*类型字符串 赋值给当前的字符串
string& operator=(const string& s);               //把字符串s赋给当前的字符串
string& operator=(char c);                        //字符赋值给当前的字符串
string& assign=(const char *s);                   //把字符串s赋值给当前字符串
string& assign =(const char* s, int n);           //把字符串s的前n个字符赋值给当前字符串
string& assign =(const string& s);                //把字符串s附给当前字符串
string& assign =(int n, char c);                  //用n个字符c赋值给当前字符串

string字符串拼接 
string& operator+=(const char* str);                 //重载+=操作符
string& operator+=(const char c);                    //重载+=操作符
string& operator+=(const string& str);               //重载+=操作符

string& append(const char* s);                       //把字符串s连接到当前字符串结尾
string& append(const char* s, int n);                //把字符串s的前n个字符连接到当前字符串结尾
string& append(const string& s);                     //同operator+=(const string& str)
string& append(const string& s, int pos, int n);     //字符串s中从pos开始的n个字符连接到字符串结尾

字符串查找和替换
int find(const string& str, int pos = 0) const;             //查找str第一次出现位置，从pos开始查找
int find(const char* s, int pos = 0) const;                 //查找s第一次出现位置，从pos开始查找
int find(const char* s, int pos, int n) const;              //从pos位置查找s的前n个字符第一次位置
int find(const char c, int pos = 0) const;                  //查找字符c第一次出现位置
int rfind(const string& str,int pos = npos) const;          //查找str最后一次位置，从pos开始查找
int rfind(cosnt char* s, int pos = npos) const;             //查找s最后一次位置，从pos开始查找
int rfind(const char* s,int pos,int n) const;               //从pos查找s的前n个字符最后一次位置
int rfind(const char c, int pos = 0)const;                  //查找字符c最后一次出现位置
string& replace(int pos, int n, const string& str);         //替换从pos开始n个字符为字符串str
string& replace(int pos, int n, const char* s);             //替换从pos开始的n个字符为字符串s
string& replace(str.begin(), str.end(), 'a', 'b');          //替换该作用域里的字符'a'为字符'b'


字符串比较
是比较字符的ASCII码值
=返回0      >返回1     <返回-1
int compare(const string &s)const;与字符串s比较
int compare(const string *s)const;与字符串s比较
int strcasecmp(const char* S1,const char* S2)比较两个字符串，忽视大小写，S1<S2返回负数 S1>S2返回正数  S1=S2返回0
int strcmp(const char* S1,const char* S2)比较两个字符串，不忽视大小写


string单个字符存取
char& operator[](int n);通过[]方式取字符
char& at(int n);通过at方法获取字符

字符串 插入和删除
string& insert(int pos, const char* s);//插入字符串
string& insert(int pos,const string& str);//插入字符串
string& insert(int pos, int n, char c);//再指定位置插入n个字符c
string& erase(int pos, int n = npos);//删除从Pos开始的n个字符


string获取想要的子串
string substr(int pos = 0;int n = npos)const;//返回由pos位置开始的n个字符组成的字符串
substr(pos, len)：从 pos 位置开始，获取长度为 len 的子串。
substr(pos)：从 pos 位置开始，获取直到字符串末尾的所有字符。
while (std::getline(iss, token, ' ')) {  // 以空格为分隔符
    tokens.push_back(token);
}
=============================================================================================
strpbrk（char*,  "字符串"）从 字符串 位置开始，获取直到字符串末尾的所有字符。返回char*
strchr(char*, char)	从 字符 位置开始，获取直到字符串末尾的所有字符。返回char*
strtok();按照空格拆分字符串
strncat(str1, str2, len);将字符串str2前len个字符拼接到str1后面

字符串拷贝
strcpy(char*a,char*b)	将b中的字符拷贝到a中，不会做边界检测，不处理源和目标字符串重叠的情况
strncpy（char*a,char*b,int n)	将b中的n个数据拷贝到a中，处理源和目标字符串重叠的情况
memcpy(a, b, n)	将b中的n个元素复制到a中，不止能复制字符串，不处理源和目标字符串重叠的情况
memmove(a,b,n)	将b中的n个元素复制到a中，不止能复制字符串，处理源和目标字符串重叠的情况
