线程概念：
	进程：有独立的进程地址空间。有独立的pcb。	分配资源的最小单位
	线程：有独立的pcb。没有独立的进程地址空间。
	ps  -Lf进程id      --->线程号。LWP    --->cpu执行的最小单位。
线程共享：
	独享  栈空间（内核栈、用户栈）
	共享：./ text. / data. / rodataa. / bsss heap    --->共享【全局变量】（errno）
线程控制原语：
---------	pthread_t  othread_self（void）；获取线程id。线程id是在进程地址空间内部，用来标识线程身份的id号。
		返回值：本线程id
	检查出错返回：线程中。
		fprintf（stderr，“xxx  error：%s、n”，strerror（ret））；

---------	int  pthread_create（pthread_t  *tid，const  pthread_attr_t  *attr，void *（*start_rountn）（void *），void *arg）；
		参1：传出参数，表新创建的子线程    id
		参2：线程属性。传BULL表使用默认属性。
		参3：子线程回调函数。创建成功，ptherad_create函数返回时，该函数会被自动调用。
		参4：参3的参数。没有的话，传NULL
	返回值：	成功：0	失败：errno

循环创建N个子线程程：
	for（i=0；i<5；i++）
		othread_create（&tid，NULL，tfn，（void *）i）；//将int类型i，强转成 void *，传参。

----------	void  pthread_exit（void *retval）；退出当前线程。
		retval：退出值。无退出值时，NULL
		exit（）；退出当前进程。
		return；返回到调用者那里去。
		pthread_exit（）；退出当前线程。

----------	int pthread_join（pthread_t  thread，void  **retval）；回收线程。
		thread：待回收的线程id
		retval：传出参数。回收的那个线程的退出值。
		返回值：成功：0	失败：errno

-----------	int pthread_detach（pthread_t  thread）；设置线程分离
		thread：待分离的线程id
		返回值：成功：0	失败：errno
----------	int  pthread_cancel（pthread_ t  thread）；	杀死一个线程。需要到达取消点（保存点）
		thread：待杀死的线程id
		返回值：成功：0	失败：errno
		如果，子线程没有到达取消点，那么pthread_cancel无效。
		我们可以在程序中，手动添加一个取消点。使用pthread_testcancel（）；
		成功被pthread_cancl（）杀死的线程，返回-1，使用pthead_join回收。
	线程控制原语			进程控制原语
	pthread_create（）			fork（）；
	pthread_self（）			getpid（）；
	pthread_exit（）			exit（）；		/return
	pthread_join（）			wait（）/waitpid（）
	pthread_cancel（）			kill（）
	pthread_detach（）			
线程属性：
	设置分离属性。
	pthread_attr_t  attr		创建一个线程属性结构体变量
	pthread_attr_init（&attr）；	初始化线程属性
	pthread_attr_setdetachstate（&attr，PTHREAD_CREATE_DETACHED）；	设置线程属性为 分离态
	pthread_create（&tid，&attr，tfn，NULL）；借助修改后的设置线程属性创建为分离态的新线程
	pthread_attr_init（&attr）；	销毁线程属性
=====================================================================================
多线程并发服务器： server.c 

	1. Socket();		创建 监听套接字 lfd

	2. Bind()		绑定地址结构 Strcut scokaddr_in addr;

	3. Listen();		

	4. while (1) {		

		cfd = Accept(lfd, );

		pthread_create(&tid, NULL, tfn, (void *)cfd);

		pthread_detach(tid);  				// pthead_join(tid, void **);  新线程---专用于回收子线程。
	  }

	5. 子线程：

		void *tfn(void *arg) 
		{
			// close(lfd)			不能关闭。 主线程要使用lfd

			read(cfd)

			小--大

			write(cfd)

			pthread_exit（(void *)10）;	
		}
	