open函数：
	int open(char *pachname，int flags） #include<unistd.h>
参数：pathname：欲打开的文件路径名
          flags：文件打开方式： #incldue<fcntl.h>
		O_RDONLY|O_WRONLY|O_RDWR      O_CREAT | O_APPEND | O_TRUNC | O_EXCL | O_NONBLOCK...
	返回值：成功：打开文件所得到对应的文件描述符（整数） 失败：-1，设置errno
	int open(char *pathname，int flags，mode_t  mode）
参数：patnname：欲打开的文件路径名   	
          flags：文件打开方式：O_RDONLY | O_WRONLY | O_RDWR         O_CREAT | O_APPEND | O_TRUNC | O_EXCL | O_NONBLOCK....
          mode：参数3使用的前提，参2指定了  O_CREAT.      取值8进制数，用来描述文件的访问权限。rwx     0664
	拆功能键文件最终权限 = mode & ~umask
	返回值：成功：打开文件所得到对应的文件描述符（整数）	失败：-1，设置errno

close函数：
	int close（ int fd）
错误处理函数：	与errno相关
	printf("xxx error:%d\n"，errno）  char *strerror（int errnum）；
		printf("xxx error：%s\n",strerror(errno));
	void perror(const char *s);
		perror("open error")

read函数：
	ssize_t  read（int fd，void  *buf，size_t  count);
	参数：fd：文件描述符     buf：存数据的缓冲区    count：缓冲区大小
	返回值：成功：读到的字节数。
	失败：-1，设置 errno = EAGIN或EWOULDBLOCK,说明不是read失败，而是read以非阻塞方式读一个设备文件（网络文件），并且文件无数据
write函数：
	ssize_t  write（int fd，const  void  *buf，size_f  count);
	参数：fd：文件描述符   buf：待写出数据的缓冲区   count：写入数据大小
返回值：成功：写入的字节数。  失败：-1，设置errno
==========================================================================================
exec函数族：
	使进程执行某一程序。成功无返回值，失败返回-1
	int  execlp（const  char *file，const  char  *arg，...）；借助PATH环境变量找寻执行程序
		参数1：程序名
		参数2：argv0
		参数3：argv1
		...：argvN
		哨兵：NULL
	int  execl（const  char *path，const  char  *arg，...）；	自己指定待执行程序路径。
==========================================================================================
文件描述符：PCB进程控制块：本质  结构体。 成员：文件描述符表。
文件描述符：0/1/2/3/4..../1023    表中可用的最小的。
	0 - STDIN_FILENO
	1 - STDOUT_FILENO
	2 - STDERR_FILENO
阻塞、非阻塞：是设备文件、网络文件的属性
	产生阻塞的场景。读设备文件。读网络文件。（读常规文件无阻塞概念。）
	/dec/tty --终端文件。
	open("/dev/tty"，O_RDWR | O_NONBLOCK)     ---设置/dev/tty非阻塞状态。（默认为阻塞状态）
fcntl：int flgs = fcntl( fd，F_GETFL)
	获取文件状态：F_GETFL        设置文件状态：F_SETFL
lseek函数：
	off_t  lseek（int fd，off_t  offset，int whence）；
	参数：
		fd：文件描述符
		offset：偏移量
		whence：起始偏移量：SEEK_SET/SEEK_CUR/SEEK_END
	返回值：
		成功：较起始位置偏移量	失败：-1   errno
	应用场景：
		1、文件的“读”、“写”使用同一偏移位置。
		2、使用lseek获取文件大小。
		3、使用lseek拓展文件大小：想要使文件大小真正拓展，必须引起IO操作。
			使用truncate函数，直接拓展文件。int ret = truncate("dict.cp"，250）；
传入参数：
	1、指针作为函数参数。
	2、通常有const关键字修饰。
	3.指针指向有效区域，在函数内部做读操作。
传出参数：
	1、指针做函数参数。
	2、在函数调用之前，指针指向的空间可以无意义，但必须有效。
	3、在函数内部，做写操作。
	4、函数调用结束后，充当函数返回值。
传入传出参数：
	1、指针作为函数参数。
	2、在函数调用之前，指针指向的空间有实际意义。
	3、在函数内部，先做读操作，后做写操作。
	4、函数调用结束后，充当函数返回值。
void  aaa();
int aaa(int *p，int *p2，int *p3);
bbb()
{
	aaa();
}
stat / lstat函数：
	int stat(const char *path，struct  stat  *buf);
	参数：path：文件路径          buf：（传出参数）存放文件属性。
	返回值：成功：0	失败：-1    errno
	获取文件大小：buf.st_size
	获取文件类型：buf.st_mode
	符号穿透：stat会，lstat不会。
目录操作函数：
	DIR * opendir(char *name);
	int closedir(DIR *dp);
	struct  dirent  *readdir(DIR *dp);
		sturct  dirent{
		inode
		char dname[256];
	}
	















