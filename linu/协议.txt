协议：
	一组规则。

分层模型结构：

	OSI七层模型：  物、数、网、传、会、表、应

	TCP/IP 4层模型：网（链路层/网络接口层）、网、传、应

		应用层：http、ftp、nfs、ssh、telnet。。。

		传输层：TCP、UDP

		网络层：IP、ICMP、IGMP

		链路层：以太网帧协议、ARP
c/s模型：

	client-server

b/s模型：

	browser-server

			C/S					B/S

	优点：	缓存大量数据、协议选择灵活			安全性、跨平台、开发工作量较小

		速度快

	缺点：	安全性、跨平台、开发工作量较大			不能缓存大量数据、严格遵守 http


网络传输流程：

	数据没有封装之前，是不能在网络中传递。

	数据-》应用层-》传输层-》网络层-》链路层  --- 网络环境

	
以太网帧协议：

	ARP协议：根据 Ip 地址获取 mac 地址。

	以太网帧协议：根据mac地址，完成数据包传输。

IP协议：
	
	版本： IPv4、IPv6  -- 4位

	TTL： time to live 。 设置数据包在路由节点中的跳转上限。每经过一个路由节点，该值-1， 减为0的路由，有义务将该数据包丢弃

	源IP： 32位。--- 4字节		192.168.1.108 --- 点分十进制 IP地址（string）  --- 二进制 

	目的IP：32位。--- 4字节


IP地址：可以在网络环境中，唯一标识一台主机。

端口号：可以网络的一台主机上，唯一标识一个进程。

ip地址+端口号：可以在网络环境中，唯一标识一个进程。


UDP：
	16位：源端口号。	2^16 = 65536  

	16位：目的端口号。

TCP协议：

	16位：源端口号。	2^16 = 65536  

	16位：目的端口号。

	32序号;

	32确认序号。	

	6个标志位。

	16位窗口大小。	2^16 = 65536 
=========================================================================================
	HTTP
请求协议： --- 浏览器组织，发送

GET /hello.c Http1.1\r\n
2. Host: localhost:2222\r\n
3. User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/201001    01 Firefox/24.0\r\n
4. Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n
5. Accept-Language: zh-cn,zh;q=0.8,en-us;q=0.5,en;q=0.3\r\n
6. Accept-Encoding: gzip, deflate\r\n
7. Connection: keep-alive\r\n
8. If-Modified-Since: Fri, 18 Jul 2014 08:36:36 GMT\r\n
【空行】\r\n

应答协议：

Http1.1 200 OK
2. Server: xhttpd
Content-Type：text/plain; charset=iso-8859-1 
3. Date: Fri, 18 Jul 2014 14:34:26 GMT
5. Content-Length: 32  （ 要么不写 或者 传-1， 要写务必精确 ！ ）
6. Content-Language: zh-CN
7. Last-Modified: Fri, 18 Jul 2014 08:36:36 GMT
8. Connection: close 
\r\n
[数据起始。。。。。
。。。。
。。。数据终止]

---------------------------------------------

1. getline() 获取 http协议的第一行。

2. 从首行中拆分  GET、文件名、协议版本。 获取用户请求的文件名。

3. 判断文件是否存在。 stat()

4. 判断是文件还是目录。

5. 是文件-- open -- read -- 写回给浏览器

6. 先写 http 应答协议头 ： 	http/1.1 200 ok
			
				Content-Type：text/plain; charset=iso-8859-1 
7. 写文件数据。
=================================================================================



三次握手：

	主动发起连接请求端，发送 SYN 标志位，请求建立连接。 携带序号号、数据字节数(0)、滑动窗口大小。

	被动接受连接请求端，发送 ACK 标志位，同时携带 SYN 请求标志位。携带序号、确认序号、数据字节数(0)、滑动窗口大小。

	主动发起连接请求端，发送 ACK 标志位，应答服务器连接请求。携带确认序号。

四次挥手：

	主动关闭连接请求端， 发送 FIN 标志位。 

	被动关闭连接请求端， 应答 ACK 标志位。 		 ----- 半关闭完成。


	被动关闭连接请求端， 发送 FIN 标志位。

	主动关闭连接请求端， 应答 ACK 标志位。		 ----- 连接全部关闭

	
滑动窗口：

	发送给连接对端，本端的缓冲区大小（实时），保证数据不会丢失。


错误处理函数： 

	封装目的： 

		在 server.c 编程过程中突出逻辑，将出错处理与逻辑分开，可以直接跳转man手册。


	【wrap.c】								【wrap.h】


	存放网络通信相关常用 自定义函数						存放 网络通信相关常用 自定义函数原型(声明)。

	命名方式：系统调用函数首字符大写, 方便查看man手册
		
		  如：Listen()、Accept();

	函数功能：调用系统调用函数，处理出错场景。

	在 server.c 和 client.c 中调用 自定义函数

	联合编译 server.c 和 wrap.c 生成 server
 
		 client.c 和 wrap.c 生成 client


readn：
	读 N 个字节

readline：

	读一行


read 函数的返回值：

	1. > 0 实际读到的字节数

	2. = 0 已经读到结尾（对端已经关闭）【 ！重 ！点 ！】

	3. -1 应进一步判断errno的值：

		errno = EAGAIN or EWOULDBLOCK: 设置了非阻塞方式 读。 没有数据到达。 

		errno = EINTR 慢速系统调用被 中断。

		errno = “其他情况” 异常。


