gdb调试工具：
	-g：使用该参数编译可以执行文件，得到调试表
	
	gdb  a.out

	list：list	1	列出源码。根据源码指定  行号设置断点。

	b：b	20	在20行位置设置断点。

	run/r：运行程序

	n/next：下一条指令（会越过函数）

	s/step：下一条指令（会进入函数）

	p/print：p  i  查看变量的值。

	continue：继续执行断点后续指令。

	quit：退出gdb当前调试。

其他指令：
gcc:
	-c 编译、汇编指定的源文件，但是不进行链接	-o file1 file2 将文件file2文件编译成可执行文件file1
	-g 编译时，生成调试信息，该程序可被GDB调试	-D 编译时，指定一个宏
	-l 编译时，指定使用的库				-L 编译时，搜索库的路径
	-std 指定c方言，如-std=c99 -std=c++14	gcc默认方言是GNU C
	-On n的取值范围：0~3.编译器优化选项的4个级别，-O0表示没有优化，-O1为缺省值，O3优化级别最高

	run：使用run查找段错误出现位置。

	finish：结束当前函数调用。

	set args：设置main函数命令行参数

	run 字串1 字串2...：设置main函数命令行参数

	info b：查看断点信息表

	b 20 if i= 5：设置条件断点

	ptype：查看变量类型。
	
	bt：列出当前程序正存活着的栈帧

	frame：根据栈帧编号，切换栈帧

	display：设置跟踪变量

	undisplay：取消设置跟踪变量，使用跟踪变量的编号
============================================================================================
makefile：
	命令：makefile，Makefile

	1个规则：
		目标：依赖条件
			（一个tab缩进）命令
		1.目标的时间必须晚于依赖条件的时间，否则，更新目标
		2.依赖条件如果不存在，找寻新的规则去产生依赖条件。
	
	ALL：指定makefile的终极目标


	2个函数：
		src = $(wildcard ./*.c):匹配当前工作目录下的所有.c文件。将文件名组成列表，复制给变量src。src = add.c sub.c divl.c

		obj = $(patsubst %.c, %.o, %(src)):将参数3中，包含参数1的部分，替换为参数2。obj = add.o sub.o divl.o


	clean:（没有依赖）
		
		-rm -rf $(obj)a.out	"-"：作用是，删除不存在文件时，不报错。顺序执行结束。


	3个自动变量：
		$@:在规则的命令中，表示规则中的目标。

		$^:在规则的命令中，表示所有以来条件。

		$<:在规则的命令，表示第一个依赖条件。
	模式规则：
		%.o:%.c
			gcc -c $< -o %@
src=$(wildcard ./*.c)
objs=$(patsubst %.c, %.o, $(src))
target=app
$(target):$(objs)
	$(CC) $(objs) -o $(target)

%.o:%.c
	$(CC) -c $< -o $@

.PHONY:clean
clean:
	rm $(objs) -f
==========================================================================================
find命令：找文件
	-type 按文件类型搜索	d/p/s/c/b/1/ f文件
	-name 按文件名搜索	find /name "*file*.jpg"
	-maxdepth 指定搜索深度。用作为第一个参数出现。
		find /-maxdepth 1 -name "*file*.jpg"
	-size 按文件大小搜索。单位：k、M、G
		find /home/itcast -size +20M -size -50M
	-atime、mtime、ctime天 amin、mmin、cmin分钟
	-exec：将find搜索的结果集执行某一指定命令。
		find /usr/ -name '*tmp*' -exec ls -ld {} \;
	-ok:以交互式的方式 将find搜索的结果集执行某一指定命令
	-xargs：将find搜索的结果集执行某一指令命令。当结果集数量过大时，可以分片映射。

grep命令：找文件内容
	grep -r 'copy' ./ -n	-r递归	-n显示行
	ps aux | grep 'cupsd'  --检索进程结果集。
kill命令：kill -l查看所有信号	kill -9 进程ID	杀死指定进程
==========================================================================================
查看进程运行状态的指令：ps命令。“ps -aux | grep PID”，用来查看某PID进程状态

查看内存使用情况的指令：free命令。“free -m”，命令查看内存使用情况。

tar解压文件的参数：

五个命令中必选一个
     -c: 建立压缩档案
     -x：解压
     -t：查看内容
     -r：向压缩归档文件末尾追加文件
     -u：更新原压缩包中的文件
这几个参数是可选的
     -z：有gzip属性的
     -j：有bz2属性的
     -Z：有compress属性的
     -v：显示所有过程
     -O：将文件解开到标准输出

r	w	x
4	2	1
每种身份(owner/group/others)各自的三个权限(r/w/x)分数是需要累加的，

例如当权限为： [-rwxrwx---] ，则分数是：

owner = rwx = 4+2+1 = 7

group = rwx = 4+2+1 = 7

others= --- = 0+0+0 = 0

chmod 770 douya.c //即修改douya.c文件的权限为770
========================================================================================
软连接：
	ln -s file file.s	给file文件设置软连接file.s	只在当前目录有用
	ln -s 绝对路径/file file.s2	给file文件设置软连接file.s2	任何位置都有用

硬链接：
	ln file file.h	给file文件设置硬链接file.h	硬链接文件和原文件是同步的，修改一个其他也会变
=========================================================================================
静态库：
	1、gcc获得.o文件
	2、将.o文件打包，使用ar工具(archive)
	ar rcs libxxx.a xxx.o xxx.o
优点：静态库被打包到应用程序中加载速度快	缺点:	消耗系统资源、浪费内存
	发布程序无需提供静态库，移植方便		更新、部署、发布麻烦
=========================================================================================
动态库：
	1、gcc得到.o文件，得到和位置无关的代码
	gcc -c -fpic/-fPIC  a.c  b.c
	2、gcc得到动态库
	gcc -shared a.o  b.o  -o libcalc.so

	ldd app  可以查看可执行文件app 所依赖的库
配置加载动态库：
临时设置：	export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:动态库路径
用户永久更改：	~/.bashrc最下方加上export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:动态库路径
		. .bashrc刷新设置 source .bashrc
系统级别永久更改要去 /etc/profile里改
	优点：可以实现进程间资源共享(共享库)	缺点：	加载速度比静态库慢
		更新、部署、发布简单			发布程序时需要提供依赖的动态库
		可以控制合适加载动态库